@page
@model SEP490_SU25_G86_Client.Pages.Common.registerModel
@{
    Layout = null;
}
<!DOCTYPE html>
<html lang="vi">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>ƒêƒÉng k√Ω - CVMatcher</title>
    <link rel="stylesheet" href="~/css/style.css">
    <link rel="stylesheet" href="~/css/register.css">
    <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@400;500;700&display=swap" rel="stylesheet">
</head>
<body>
    <div class="login-container">
        <!-- Ph·∫ßn tr√°i -->
        <div class="left-section">
            <img src="~/assets/images/LogoCVM.png" alt="CVMatcher" class="logo">
            <img src="~/assets/images/battay.png" alt="Handshake Illustration" class="handshake">
            <p class="message"></p>
        </div>

        <!-- Ph·∫ßn ph·∫£i -->
        <div class="right-section">
            <div class="form-container">
              

                <a href="/Common/Homepage" class="homepage-link">
                    <img src="~/assets/images/left-svg-hd-removebg-preview.png" alt="Chevron Left" class="chevron-icon">
                    Homepage
                </a>
                <a href="/Common/Login" class="register-link">B·∫°n ƒë√£ c√≥ t√†i kho·∫£n? <span>ƒêƒÇNG NH·∫¨P</span></a>
                <br />
                <div class="form-container">
                    <h2 class="title">Ch√†o m·ª´ng b·∫°n ƒë·∫øn v·ªõi CVMatcher</h2>
                    <p class="subtitle">C√πng kh√°m ph√° nh·ªØng c∆° h·ªôi vi·ªác l√†m ph√π h·ª£p nh·∫•t d√†nh cho b·∫°n</p>

                    <form method="post" class="register-form" id="register-form">
                        <div class="input-row">
                            <input asp-for="FullName" type="text" placeholder="Full Name" required>
                        </div>
                        <div class="input-group">
                            <input asp-for="Email" type="email" placeholder="Email" required>
                        </div>
                        <div class="input-group">
                            <input asp-for="Password" type="password" placeholder="Password" id="password" required>
                            <span class="toggle-password">SHOW</span>
                        </div>
                        <div class="input-group">
                            <input asp-for="ConfirmPassword" type="password" placeholder="Confirm Password" id="confirm-password" required>
                            <span class="toggle-password">SHOW</span>
                        </div>
                        <div class="role-select-group" style="display:flex; gap:10px; margin-bottom:12px; justify-content:center;">
                            <input type="radio" id="role-candidate" name="RoleName" value="CANDIDATE" asp-for="RoleName" style="display:none;" checked="@(Model.RoleName == null || Model.RoleName == "CANDIDATE" ? "checked" : null)">
                            <label for="role-candidate" class="role-card @(Model.RoleName == null || Model.RoleName == "CANDIDATE" ? "selected" : "")" style="cursor:pointer; border:1.5px solid #ccc; border-radius:8px; padding:6px 10px; text-align:center; min-width:70px; transition:all 0.2s; display:flex; flex-direction:column; align-items:center;">
                                <span style="font-size:1.5rem; margin-bottom:2px;">üë§</span>
                                <div style="font-weight:500; font-size:13px;">·ª®ng vi√™n</div>
                            </label>
                            <input type="radio" id="role-employer" name="RoleName" value="EMPLOYER" asp-for="RoleName" style="display:none;" checked="@(Model.RoleName == "EMPLOYER" ? "checked" : null)">
                            <label for="role-employer" class="role-card @(Model.RoleName == "EMPLOYER" ? "selected" : "")" style="cursor:pointer; border:1.5px solid #ccc; border-radius:8px; padding:6px 10px; text-align:center; min-width:70px; transition:all 0.2s; display:flex; flex-direction:column; align-items:center;">
                                <span style="font-size:1.5rem; margin-bottom:2px;">üè¢</span>
                                <div style="font-weight:500; font-size:13px;">Nh√† tuy·ªÉn d·ª•ng</div>
                            </label>
                        </div>
                        <style>
                            .role-card.selected {
                                border: 2px solid #218838 !important;
                                background: #e6f9ed;
                                box-shadow: 0 2px 8px rgba(33,136,56,0.08);
                            }
                            .role-card:hover {
                                border: 2px solid #218838;
                            }
                            .role-card {
                                font-size: 12px;
                                padding: 6px 10px !important;
                                border-radius: 8px !important;
                                min-width: 70px !important;
                                min-height: 50px;
                            }
                        </style>
                        <script>
                            document.addEventListener('DOMContentLoaded', function() {
                                document.querySelectorAll('.role-card').forEach(function(card) {
                                    card.addEventListener('click', function() {
                                        document.querySelectorAll('.role-card').forEach(c => c.classList.remove('selected'));
                                        card.classList.add('selected');
                                    });
                                });
                            });
                        </script>
                        <div class="checkbox-group">
                            <input asp-for="AcceptTerms" type="checkbox" id="terms" required>
                            <label for="terms">T√¥i ƒë·ªìng √Ω v·ªõi <a href="/Common/TermsOfService">ƒêi·ªÅu kho·∫£n d·ªãch v·ª•</a></label>
                        </div>
                        <div style="margin: 10px 0 0 24px;">
                            <a href="/Common/ResendConfirmation" style="font-size: 14px; color: #000; text-decoration: underline;">
                                G·ª≠i l·∫°i email x√°c th·ª±c t√†i kho·∫£n
                            </a>
                        </div>
                        <button type="submit" class="register-button">
                            T·∫°o t√†i kho·∫£n
                        </button>
                        @if (!string.IsNullOrEmpty(Model.ErrorMessage))
                        {
                            <div class="text-danger" style="margin-top:10px">@Model.ErrorMessage</div>
                        }
                    </form>

                    <!-- Success Overlay -->
                    <div id="register-success-overlay">
                        <div class="register-overlay-content">
                            <div class="register-spinner"></div>
                            <div class="register-success-message">ƒêƒÉng k√Ω th√†nh c√¥ng!</div>
                            <div class="register-redirect-message">ƒêang chuy·ªÉn h∆∞·ªõng ƒë·∫øn trang ƒëƒÉng nh·∫≠p...</div>
                        </div>
                    </div>
                        <script>
                        document.getElementById('register-form').addEventListener('submit', function(e) {
                            // N·∫øu ƒë√£ c√≥ overlay th√¨ show lu√¥n (ph√≤ng tr∆∞·ªùng h·ª£p submit th√†nh c√¥ng)
                            setTimeout(function() {
                                var overlay = document.getElementById('register-success-overlay');
                                if (overlay) overlay.style.display = 'flex';
                            }, 100); // delay nh·∫π ƒë·ªÉ tr√°nh show khi submit l·ªói
                        });
                        </script>

                    <div class="divider">Ho·∫∑c ƒëƒÉng nh·∫≠p b·∫±ng</div>

                    <div class="social-buttons">
                        <div id="g_id_onload"
                             data-client_id="29046688225-8qm2dol9cks9d77gs667pb6783n8cmqt.apps.googleusercontent.com"
                             data-context="signin"
                             data-ux_mode="popup"
                             data-callback="onGoogleSignIn"
                             data-auto_prompt="false">
                        </div>
                        <div class="g_id_signin"
                             data-shape="rectangular"
                             data-theme="outline"
                             data-size="large"
                             data-logo_alignment="center">
                        </div>

                        <button class="social-button" id="facebook-register-btn" type="button">
                            <img src="~/assets/images/2023_Facebook_icon.svg.webp" alt="Facebook Icon">
                        </button>
                    </div>
                </div>
            </div>
        </div>

        <script src="https://accounts.google.com/gsi/client" async defer></script>
    <script>
        // Toggle hi·ªÉn th·ªã m·∫≠t kh·∫©u
        document.querySelectorAll('.toggle-password').forEach(toggle => {
            toggle.addEventListener('click', function() {
                const passwordInput = this.previousElementSibling;
                this.textContent = this.textContent === 'SHOW' ? 'HIDE' : 'SHOW';
                passwordInput.type = passwordInput.type === 'password' ? 'text' : 'password';
            });
        });

          // Google Sign-In callback
        async function onGoogleSignIn(response) {
            const idToken = response.credential;
            const payload = {
                provider: 'Google',
                idToken: idToken
            };
            try {
                 const res = await fetch('https://localhost:7004/api/Auth/external-login/google', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(payload)
                });
                if (res.ok) {
                    const data = await res.json();
                    // Chuy·ªÉn h∆∞·ªõng sang endpoint ƒë·ªÉ l∆∞u session server-side
                    window.location.href = `/Common/GoogleLoginCallback?token=${encodeURIComponent(data.token)}&role=${encodeURIComponent(data.role)}&userId=${encodeURIComponent(data.userId)}`;
                } else {
                    alert('ƒêƒÉng nh·∫≠p Google th·∫•t b·∫°i!');
                }
            } catch (e) {
                alert('L·ªói k·∫øt n·ªëi m√°y ch·ªß!');
            }
        }

        // Facebook SDK
        window.fbAsyncInit = function() {
            FB.init({
                appId      : '2445139302530728',
                cookie     : true,
                xfbml      : true,
                version    : 'v19.0'
            });
        };
        (function(d, s, id){
            var js, fjs = d.getElementsByTagName(s)[0];
            if (d.getElementById(id)) {return;}
            js = d.createElement(s); js.id = id;
            js.src = "https://connect.facebook.net/en_US/sdk.js";
            fjs.parentNode.insertBefore(js, fjs);
        }(document, 'script', 'facebook-jssdk'));

        document.getElementById('facebook-register-btn').addEventListener('click', function() {
            FB.login(function(response) {
                if (response.authResponse) {
                    const accessToken = response.authResponse.accessToken;
                    // Log access token ra console
                    console.log('FB access token:', accessToken);
                    const payload = {
                        provider: 'Facebook',
                        accessToken: accessToken
                    };
                    fetch('https://localhost:7004/api/Auth/external-login/facebook', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify(payload)
                    })
                    .then(async res => {
                        const text = await res.text();
                        // Log status code v√† n·ªôi dung response backend
                        console.log('Backend status:', res.status);
                        console.log('Backend response:', text);
                        if (res.ok) {
                            const data = JSON.parse(text);
                            if (data.token) {
                                window.location.href = `/Common/GoogleLoginCallback?token=${data.token}&role=${data.role}&userId=${data.userId}`;
                            } else {
                                alert('ƒêƒÉng nh·∫≠p Facebook th·∫•t b·∫°i!');
                            }
                        } else {
                            alert('ƒêƒÉng nh·∫≠p Facebook th·∫•t b·∫°i!');
                        }
                    })
                    .catch(() => alert('L·ªói k·∫øt n·ªëi m√°y ch·ªß!'));
                } else {
                    alert('B·∫°n ch∆∞a cho ph√©p ƒëƒÉng nh·∫≠p b·∫±ng Facebook!');
                }
            }, {scope: 'email,public_profile'});
        });
    </script>
</body>
</html>