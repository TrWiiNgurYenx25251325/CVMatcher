@page
@{
    var jwtToken = HttpContext.Session.GetString("jwt_token");
}
<link rel="stylesheet" href="~/css/cvsubmissions.css" />
<script>
    // Lưu token vào localStorage nếu chưa có (chỉ thực hiện khi trang load)
    const serverToken = '@jwtToken';
    if (serverToken && !localStorage.getItem('jwt_token')) {
        localStorage.setItem('jwt_token', serverToken);
    }
</script>
@model SEP490_SU25_G86_Client.Pages.Job.CvSubmissionsModel
@{
    ViewData["Title"] = "Danh sách CV đã nộp";
}
<div class="container-cv">
    <div class="cv-card">
        <div class="cv-title"><i class="bi bi-card-list"></i> Danh sách CV đã nộp vào tin tuyển dụng</div>
        @if (!string.IsNullOrEmpty(Model.JobPostTitle))
        {
            <div class="cv-jobinfo">
                <strong>Tin tuyển dụng:</strong> @Model.JobPostTitle
                @if (!string.IsNullOrEmpty(Model.CompanyName))
                {
                    <span> | <strong>Công ty:</strong> @Model.CompanyName</span>
                }
            </div>
        }
    </div>
    <div class="cv-card" style="padding-top:20px;">
        @if (!string.IsNullOrEmpty(Model.ErrorMessage))
        {
            <div class="alert alert-danger">@Model.ErrorMessage</div>
        }
        @await Html.PartialAsync("_CvSubmissionFilters", Model)
        <div class="mb-3 text-end">
    <button id="ai-filter-all-btn" class="btn btn-warning" type="button" onclick="aiFilterAll()">
        <i class="bi bi-lightning-charge"></i> Lọc tất cả bằng AI
    </button>
    <span id="ai-filter-all-progress" class="ms-2 text-muted" style="display:none"></span>
</div>
@if (Model.CvSubmissions != null && Model.CvSubmissions.Any())
        {
            <div class="table-responsive-cv">
                <table class="table table-bordered table-hover mt-3">
                    <thead class="table-light">
                        <tr>
                            <th>STT</th>
                            <th>Tên ứng viên</th>
                            <th>File CV</th>
                            <th>Ngày nộp</th>
                            <th>Trạng thái</th>
                            <th>Điểm phù hợp</th>
                            <th>Ghi chú</th>
                            <th class="actions-col">Thao tác</th>
                        </tr>
                    </thead>
                    <tbody>
                        @for (int i = 0; i < Model.CvSubmissions.Count; i++)
                        {
                            var cv = Model.CvSubmissions[i];
                            <tr>
                                <td>@(i + 1)</td>
                                <td>@cv.CandidateName</td>
                                <td>
                                    @if (!string.IsNullOrEmpty(cv.CvFileUrl))
                                    {
                                        <a href="@cv.CvFileUrl" target="_blank">Xem CV</a>
                                    }
                                </td>
                                <td>@(cv.SubmissionDate?.ToString("dd/MM/yyyy HH:mm") ?? "")</td>
                                <td>@cv.Status</td>
                                <td>
                                    <span id="score-@cv.SubmissionId">@((cv.TotalScore?.ToString("0.##")) ?? "-")</span>
                                    <span id="spinner-@cv.SubmissionId" class="spinner-border spinner-border-sm text-warning" style="display:none"></span>
                                </td>
                                <td>
                                    <div class="d-flex justify-content-center" style="max-width: 130px;">
                                        @if (string.IsNullOrWhiteSpace(cv.RecruiterNote))
                                        {
                                            <button type="button" class="btn btn-sm btn-outline-primary text-truncate"
                                                    style="width: 100%;"
                                                    onclick="openNoteModal(@cv.SubmissionId, '')">
                                                Thêm ghi chú
                                            </button>
                                        }
                                        else
                                        {
                                            <a href="javascript:void(0)" class="text-primary text-truncate d-block"
                                               style="max-width: 130px;"
                                               onclick="openNoteModal(@cv.SubmissionId, '@cv.RecruiterNote?.Replace("'", "\\'")')">
                                                @cv.RecruiterNote
                                            </a>
                                        }
                                    </div>
                                </td>


                                <td class="actions-col">
                                    @if (cv.Status == "ĐÃ DUYỆT" || cv.Status == "ĐÃ TỪ CHỐI")
                                    {
                                        <div class="action-disabled actions-cell">
                                            <button type="button" class="btn btn-warning btn-sm" disabled>Lọc CV bằng AI</button>
                                            <button type="button" class="btn btn-success btn-sm" disabled>Duyệt CV</button>
                                            <button type="button" class="btn btn-danger btn-sm" disabled>Từ chối CV</button>
                                        </div>
                                    }
                                    else
                                    {
                                        <div class="actions-cell">
                                            @if (cv.Status == "Đã chấm điểm bằng AI")
                                            {
                                                <button type="button" class="btn btn-warning btn-sm" disabled>Lọc CV bằng AI</button>
                                            }
                                            else
                                            {
                                                <button type="button" class="btn btn-warning btn-sm" onclick="aiFilter(@cv.SubmissionId, @Model.JobPostId, '@cv.CvParsedDataId', '@cv.JobCriteriaId')">Lọc CV bằng AI</button>
                                            }
                                            <form method="post" asp-page-handler="Approve" asp-route-id="@cv.SubmissionId" style="display:inline">
                                                <input type="hidden" name="JobPostId" value="@Model.JobPostId" />
                                                <button type="submit" class="btn btn-success btn-sm">Duyệt CV</button>
                                            </form>
                                            <form method="post" asp-page-handler="Reject" asp-route-id="@cv.SubmissionId" style="display:inline">
                                                <input type="hidden" name="JobPostId" value="@Model.JobPostId" />
                                                <button type="submit" class="btn btn-danger btn-sm">Từ chối CV</button>
                                            </form>
                                        </div>
                                    }
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
            <!-- PHÂN TRANG -->
            <nav aria-label="CV pagination">
                <ul class="pagination justify-content-center">
                    <li class="page-item @(Model.PageIndex == 1 ? "disabled" : "")">
                        <a class="page-link" href="@Url.Page(null, null, new {
                        JobPostId = Model.JobPostId,
                        StatusFilter = Model.StatusFilter,
                        CandidateNameFilter = Model.CandidateNameFilter,
                        ScoreMin = Model.ScoreMin,
                        ScoreMax = Model.ScoreMax,
                        SubmissionDateFrom = Model.SubmissionDateFrom?.ToString("yyyy-MM-dd"),
                        SubmissionDateTo = Model.SubmissionDateTo?.ToString("yyyy-MM-dd"),
                        PageIndex = Model.PageIndex - 1,
                        PageSize = Model.PageSize
                    }, null)">
                            &laquo;
                        </a>
                    </li>
                    @for (int p = 1; p <= Model.TotalPages; p++)
                    {
                        <li class="page-item @(p == Model.PageIndex ? "active" : "")">
                            <a class="page-link" href="@Url.Page(null, null, new {
                            JobPostId = Model.JobPostId,
                            StatusFilter = Model.StatusFilter,
                            CandidateNameFilter = Model.CandidateNameFilter,
                            ScoreMin = Model.ScoreMin,
                            ScoreMax = Model.ScoreMax,
                            SubmissionDateFrom = Model.SubmissionDateFrom?.ToString("yyyy-MM-dd"),
                            SubmissionDateTo = Model.SubmissionDateTo?.ToString("yyyy-MM-dd"),
                            PageIndex = p,
                            PageSize = Model.PageSize
                        }, null)">@p</a>
                        </li>
                    }
                    <li class="page-item @(Model.PageIndex == Model.TotalPages ? "disabled" : "")">
                        <a class="page-link" href="@Url.Page(null, null, new {
                        JobPostId = Model.JobPostId,
                        StatusFilter = Model.StatusFilter,
                        CandidateNameFilter = Model.CandidateNameFilter,
                        ScoreMin = Model.ScoreMin,
                        ScoreMax = Model.ScoreMax,
                        SubmissionDateFrom = Model.SubmissionDateFrom?.ToString("yyyy-MM-dd"),
                        SubmissionDateTo = Model.SubmissionDateTo?.ToString("yyyy-MM-dd"),
                        PageIndex = Model.PageIndex + 1,
                        PageSize = Model.PageSize
                    }, null)">
                            &raquo;
                        </a>
                    </li>
                </ul>
            </nav>
            <div class="text-center text-muted" style="margin-top: 0.5rem;">
                @{
                    var start = (Model.TotalRecords == 0) ? 0 : ((Model.PageIndex - 1) * Model.PageSize + 1);
                    var end = Math.Min(Model.PageIndex * Model.PageSize, Model.TotalRecords);
                }
                Hiển thị @start - @end trong tổng số @Model.TotalRecords CV
            </div>
        }

        else if (string.IsNullOrEmpty(Model.ErrorMessage))
        {
            <div class="alert alert-info mt-3">Chưa có CV nào được nộp vào tin tuyển dụng này.</div>
        }
        <form method="post" asp-page-handler="UpdateNote">
            <input type="hidden" name="JobPostId" value="@Model.JobPostId" />
            <div class="modal fade" id="noteModal" tabindex="-1" aria-labelledby="noteModalLabel" aria-hidden="true">
                <div class="modal-dialog">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title" id="noteModalLabel">Cập nhật ghi chú</h5>
                            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Đóng"></button>
                        </div>
                        <div class="modal-body">
                            <input type="hidden" name="RecruiterNoteForm.SubmissionId" id="modalSubmissionId" />
                            <div class="mb-3">
                                <label for="modalRecruiterNote" class="form-label">Ghi chú:</label>
                                <textarea class="form-control" name="RecruiterNoteForm.RecruiterNote"
                                          id="modalRecruiterNote" rows="4"></textarea>
                            </div>
                        </div>
                        <div class="modal-footer">
                            <button type="submit" class="btn btn-primary">Lưu</button>
                            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Hủy</button>
                        </div>
                    </div>
                </div>
            </div>
        </form>
        @section Scripts {
        @await Html.PartialAsync("_MissingCriteriaPopupPartial")
<script src="~/lib/bootstrap/dist/js/bootstrap.bundle.min.js"></script>
<script>
// --- AI Filter logic ---
async function aiFilter(submissionId, jobPostId, cvParsedDataId, jobCriteriaId, skipReload = false) {
    if (!jobCriteriaId || jobCriteriaId === 'null' || jobCriteriaId === null) {
        showMissingCriteriaModal();
        return;
    }
    document.getElementById('score-' + submissionId).style.display = 'none';
    document.getElementById('spinner-' + submissionId).style.display = 'inline-block';
    try {
        const token = localStorage.getItem('jwt_token') || sessionStorage.getItem('jwt_token');
        const resp = await fetch('https://localhost:7004/api/AI/CompareCvWithJobCriteria', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                ...(token ? { 'Authorization': 'Bearer ' + token } : {})
            },
            body: JSON.stringify({ cvParsedDataId, jobCriteriaId })
        });
        if (!resp.ok) throw new Error("Lọc AI thất bại");
        const data = await resp.json();
        if (data && data.totalScore !== undefined && data.totalScore !== null) {
            document.getElementById('score-' + submissionId).innerText = Number(data.totalScore).toFixed(2);
            if (!skipReload) location.reload();
        } else {
            if (!skipReload) location.reload();
        }
    } catch (e) {
        alert(e.message || "Có lỗi khi lọc AI");
    }
    document.getElementById('score-' + submissionId).style.display = 'inline';
    document.getElementById('spinner-' + submissionId).style.display = 'none';
}

function openNoteModal(submissionId, recruiterNote) {
    document.getElementById("modalSubmissionId").value = submissionId;
    document.getElementById("modalRecruiterNote").value = recruiterNote;
    const modal = new bootstrap.Modal(document.getElementById("noteModal"));
    modal.show();
}
// Lọc AI tất cả submissions
async function aiFilterAll() {
    const btn = document.getElementById('ai-filter-all-btn');
    const progress = document.getElementById('ai-filter-all-progress');
    btn.disabled = true;
    progress.style.display = 'inline';
    progress.innerText = 'Đang lọc AI cho tất cả hồ sơ...';
    // Lấy danh sách submission từ model (rendered trên trang)
    const submissions = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(
        Model.CvSubmissions.Where(x => x.Status != "ĐÃ DUYỆT" && x.Status != "ĐÃ TỪ CHỐI" && x.Status != "Đã chấm điểm bằng AI" && x.CvParsedDataId != null && x.JobCriteriaId != null)
            .Select(x => new { x.SubmissionId, x.CvParsedDataId, x.JobCriteriaId })
    ));
    let success = 0, fail = 0;
    for (let i = 0; i < submissions.length; i++) {
        const { SubmissionId, CvParsedDataId, JobCriteriaId } = submissions[i];
        progress.innerText = `Đang lọc AI (${i + 1}/${submissions.length})...`;
        try {
            await aiFilter(SubmissionId, null, CvParsedDataId, JobCriteriaId, true);
            success++;
        } catch (e) {
            fail++;
        }
    }
    progress.innerText = `Hoàn thành: ${success} thành công, ${fail} thất bại.`;
    setTimeout(() => location.reload(), 1200);
}
// --- END AI Filter logic ---
@* 
// --- Duyệt/Từ chối CV không reload ---
async function approveCV(submissionId, btn) {
    if (!confirm('Bạn chắc chắn muốn DUYỆT CV này?')) return;
    btn.disabled = true;
    const row = btn.closest('tr');
    try {
        const token = localStorage.getItem('jwt_token') || sessionStorage.getItem('jwt_token');
        const resp = await fetch(`https://localhost:7004/api/cvsubmissions/${submissionId}/status`, {
            method: 'PUT',
            headers: {
                'Content-Type': 'application/json',
                ...(token ? { 'Authorization': 'Bearer ' + token } : {})
            },
            body: '"ĐÃ DUYỆT"'
        });
        if (!resp.ok) throw new Error('Không thể duyệt CV');
        // Cập nhật UI
        row.querySelector('td:nth-child(5)').innerText = 'ĐÃ DUYỆT';
        row.querySelectorAll('.actions-cell button').forEach(b => { b.disabled = true; });
        row.querySelector('.actions-cell').innerHTML = `
            <button type="button" class="btn btn-warning btn-sm" disabled>Lọc CV bằng AI</button>
            <button type="button" class="btn btn-success btn-sm" disabled>Duyệt CV</button>
            <button type="button" class="btn btn-danger btn-sm" disabled>Từ chối CV</button>
        `;
    } catch (e) {
        alert(e.message || 'Có lỗi khi duyệt CV!');
        btn.disabled = false;
    }
}
async function rejectCV(submissionId, btn) {
    if (!confirm('Bạn chắc chắn muốn TỪ CHỐI CV này?')) return;
    btn.disabled = true;
    const row = btn.closest('tr');
    try {
        const token = localStorage.getItem('jwt_token') || sessionStorage.getItem('jwt_token');
        const resp = await fetch(`https://localhost:7004/api/cvsubmissions/${submissionId}/status`, {
            method: 'PUT',
            headers: {
                'Content-Type': 'application/json',
                ...(token ? { 'Authorization': 'Bearer ' + token } : {})
            },
            body: '"ĐÃ TỪ CHỐI"'
        });
        if (!resp.ok) throw new Error('Không thể từ chối CV');
        // Cập nhật UI
        row.querySelector('td:nth-child(5)').innerText = 'ĐÃ TỪ CHỐI';
        row.querySelectorAll('.actions-cell button').forEach(b => { b.disabled = true; });
        row.querySelector('.actions-cell').innerHTML = `
            <button type="button" class="btn btn-warning btn-sm" disabled>Lọc CV bằng AI</button>
            <button type="button" class="btn btn-success btn-sm" disabled>Duyệt CV</button>
            <button type="button" class="btn btn-danger btn-sm" disabled>Từ chối CV</button>
        `;
    } catch (e) {
        alert(e.message || 'Có lỗi khi từ chối CV!');
        btn.disabled = false;
    }
} *@
</script>
}